file.path("folder1","folder2")
?dir.create
dir.create(c("testdir2","testdir2/testdir3"),recursive=T)
dir.create(paths=c("testdir2","testdir2\testdir3",recursive=T)
)
dir.create(paths=c("testdir2","testdir2\testdir3"),recursive=T)
getwd()
dir.create(file.path("testdir2","testdir3"),recursive=T)
dir.create(file.path('testdir2','testdir3'),recursive=T)
dir.create(file.path('testdir2','testdir3'),recursive=T)
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
setwd(old.dir)
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files)
old.dir<-getwd()
args(dir.create)
dir.create("testdir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=20)
my_seq<-seq(5,10,length=30)
length(my_seq)
my_seq
1:length(myseq)
1:length(my_seq)
seq(along_with=my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
x<-1:3
rep(x,times=3)
rep(x,each=2)
rep(x,times=3,each=2)
swirl()
num_vect<-c(0.5,55,-10,6)
tf<num_vect<1
tf<-num_vect<1
tf
num_vect>=6
mychar<-c("My","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char,"Anna")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na() & x>0]
x[!is.na(x) & x>0]
c(x[3],x[5],x[7])
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo,"bar","norf")
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:"0"
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<data.frame(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
rm(ls())
ls()
rm(c(ls()))
ls()
rm
rm(ls())
rm(list=ls())
?rm
make_power<-function(n){
pow<-function(x){
x^n
}
pow
}
cube<-make_power(3)
cube(2)
make_power<-function(n){
pow<-function(x){
x^n
}
pow1<-function(x){
x^(n+1)
}
c(pow,pow1)
}
c(cube,tetra)<-make_power(3)
funs<-make_power(3)
funs
funs(2)
funs[1](2)
fun[1]
funs[1]
funs[[1]]
funs[[1]](2)
funs<-make_power(3)
make_power<-function(n){
pow<-function(x){
x^n
}
pow1<-function(x){
x^(n+1)
}
c(pow,pow1)
}
funs<-make_power(3)
funs
funs[[1]](2)
funs[[2]](2)
make_power<-function(n){
pow<-function(x){
x^n
}
pow1<-function(x){
x^(n+1)
}
list(pow,pow1)
}
funs<-make_power(3)
funs
funs[[1]](2)
funs[[2]](2)
df<-data.frame(1:2,funs)
?environment
f1<-funs[[1]]
make_power<-function(n){
pow<-function(x){
x^n
}
pow1<-function(x){
x^(n+1)
}
list(pow,pow1)
}
funs<-make_power(3)
f1<-funs[[|]]
f1<-funs[[1]]
get("n",environment(f1))
ls(environment(f1))
get("pow",environment(f1))
f1(2)
n<-4
get("n",environment(f1))
get("n",environment())
get("n",environment(globalenv))
get("n",environment(emptyenv()))
get("n",environment(emptyenv)
)
parent(f1)
environment(parent=f1)
get(parent=f1)
args(parent)
args(f1)
args(environment)
get("n",environment(f1))
get("n",parent.env(environment(f1))
)
y<-10
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
x*y
}
f(3)
y<-10
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
y<-2
x*y
}
f(3)
rm(list=ls())
datetime<-"January 10, 2012 10:40"
x<-strptime(datetime,"%B %d, %Y %H:%M")
x
class(x)
swirl()
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=11)
remainder(divisor=11,num=5)
remainder(4,div=2)
ards(remainder)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},9)
evaluate(function(x){x+1},6)
evaluate(function(x){x[[1]]},c(8,4,0))
evaluate(function(x){x[[length(x)]]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("REceived")
submit()
submit()
mad_libs(place="BCN",adjective="busy",noun="myself")
submit()
'I' %p% 'love' %p% 'R!'
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
difftime(d1,t1,units='days')
f<-function(x){
g<-function(y){}
}
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
paste("Hi","all",collapse="")
paste("Hi","all",sep="")
paste("Hi","all")
args(paste)
a<-1:5
l<-as.list(a)
l
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls<-list<-lapply(flags,class)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-saplly(flags,class())
cls_vect<-saplly(flags,class
)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
rm(list=ls())
library(datasets)
data("iris")
?iris
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[,1:4],2,mean)
rm(list=ls())
data(mtcars)
?mtcars
unique(mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl,mean)
mean(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
sapply(split(mtcars$mpg,mtcars$cyl),mean)
res<-tapply(mtcars$hp,mtcars$cyl,mean)
res
abs(res[1]-res[3])
rpund(abs(res[1]-res[3]))
round(abs(res[1]-res[3]))
round(6.588)
?solve
?<<
?%cc
?%cc%
?`cc`
?`<<`
??`<<`
getwd()
setwd("D:/Course on DS - coursera/Lecture2 - RProgramming/Week3/ProgrammingAssignment2/.git")
setwd("D:/Course on DS - coursera/Lecture2 - RProgramming/Week3/ProgrammingAssignment2")
dir()
source("cachematrix.R")
ma <- matrix(c(1,2,4,9),2,2)
mVec <- makeCacheMatrix(ma)
mVec
ma$get()
ma
mVec$get()
cacheSolve(mVec)
ima<-cacheSolve(mVec)
ma %*% ima
mVec$getInverse()
m2<-matrix(c(3,5,2,1),2,2)
mVec<-makeCacheMatrix(m2)
mVec$getInverse()
im2<-cacheSolve(mVec)
im2
m2 %*% im2
mVec$getInverse()
m3<-matrix(c(2,3,1,2),2,2)
mVec<-makeCacheMatrix(m3)
mVec$get()
mVec$getInverse()
source("cachematrix.R")
rm(list=ls())
source("cachematrix.R")
mVec<-makeCacheMatrix(matrix(c(2,3,1,2),2,2))
m4<-mVec$get()
m4
mVec$getInverse()
cacheSolve(mVec)
mVec$getInverse()
mVec$set(matrix(3,4,5,6))
mVec$getInverse()
rm(list=ls())
source("cachematrix.R")
mVec<-makeCacheMatrix(matrix(c(2,3,1,2),2,2))
m3<-mVec$get()
m3
mVec$getInverse()
cacheSolve(mVec)
mVec$getInverse()
mVec$set(matrix(3,4,5,6))
mVec$getInverse()
rm(list=ls())
source("cachematrix.R")
makeCacheMatrix(matrix(c(2,3,7,6),2,2))
mc<-makeCacheMatrix(matrix(c(2,3,7,6),2,2))
mc$get()
mc$getInverse()
mc$set(matrix(2,2,2,1),2,2)
mc$set(matrix(c(2,2,2,1),2,2)
)
mc$get()
mc$set(matrix(c(1,3,2,1,5,6,9,1,3),3,3))
mc$get()
det(mc$get())
mc$getInverse()
cacheSolve(mc)
ima<-mc$getInverse()
ima
ma<-mc$get()
ma %*% ima
mc$set(matrix(c(3,4,5,2,3,1,2,0,7,6,2,4,1,4,7,2),4,4))
mc
mc$get()
det(mc$get())
mc$getInverse()
cacheSolve(mc)
ma<-mc$get()
ima<-mc$getInverse()
ma %*% ima
rm(list=ls())
source("cachematrix.R")
mc<-makeCacheMatrix(matrix(c(1,0,8,9),2,2)
)
mc$getInverse()
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
mc$getInverse()
